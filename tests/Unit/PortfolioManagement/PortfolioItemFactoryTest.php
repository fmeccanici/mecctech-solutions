<?php

namespace Tests\Unit\PortfolioManagement;

use App\PortfolioManagement\Domain\PortfolioItems\BulletPoint;
use App\PortfolioManagement\Domain\PortfolioItems\Description;
use App\PortfolioManagement\Domain\PortfolioItems\PortfolioItem;
use App\PortfolioManagement\Domain\PortfolioItems\PortfolioItemFactory;
use App\PortfolioManagement\Domain\PortfolioItems\Title;
use Tests\TestCase;

class PortfolioItemFactoryTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /** @test */
    public function it_should_create_portfolio_items_with_specified_quantity()
    {
        $amount = 100;
        $portfolioItems = PortfolioItemFactory::create($amount);
        self::assertEquals($amount, sizeof($portfolioItems));

        foreach ($portfolioItems as $portfolioItem)
        {
            self::assertInstanceOf(PortfolioItem::class, $portfolioItem);
        }
    }

    /** @test */
    public function it_should_create_portfolio_items_with_specified_tag()
    {
        $tags = array("Test Tag");
        $portfolioItems = PortfolioItemFactory::create(10, [
            "tags" => $tags
        ]);

        foreach ($portfolioItems as $portfolioItem)
        {
            self::assertEquals($tags, $portfolioItem->tags()->toArray());
        }
    }

    /** @test */
    public function it_should_create_portfolio_item_from_array()
    {
        // Given
        $titleEnglish = "Test Title";
        $titleDutch = "Test Titel";
        $descriptionEnglish = "Test Description";
        $descriptionDutch = "Test Beschrijving";
        $websiteUrl = "Test Website Url";
        $image1Url = "Test Image Url 1";
        $image2Url = "Test Image Url 2";
        $tag1 = "Tag Name 1";
        $tag2 = "Tag Name 2";
        $mainImageUrl = "Main Image Url";
        $bulletPoint1 = new BulletPoint("Test Bullet Point 1", "Test Bullet Punt 1");

        $portfolioItemAsArray = [
            "title" => [
                "dutch" => $titleDutch,
                "english" => $titleEnglish
            ],
            "description" => [
                "dutch" => $descriptionDutch,
                "english" => $descriptionEnglish
            ],
            "website_url" => $websiteUrl,
            "main_image" => [
                "url" => $mainImageUrl
            ],
            "images" => [
                0 => [
                    "url" => $image1Url
                ],
                1 => [
                    "url" => $image2Url
                ]
            ],
            "tags" => [
                $tag1, $tag2
            ],
            "bullet_points" => [
                0 => $bulletPoint1->toArray()
            ]
        ];

        // When
        $portfolioItem = PortfolioItemFactory::fromArray($portfolioItemAsArray);

        // Then
        self::assertEquals($titleEnglish, $portfolioItem->title()->english());
        self::assertEquals($titleDutch, $portfolioItem->title()->dutch());
        self::assertEquals($descriptionEnglish, $portfolioItem->description()->english());
        self::assertEquals($descriptionDutch, $portfolioItem->description()->dutch());
        self::assertEquals($websiteUrl, $portfolioItem->websiteUrl());
        self::assertEquals($image1Url, $portfolioItem->images()->first()->url());
        self::assertEquals($image2Url, $portfolioItem->images()[1]->url());
        self::assertEquals($tag1, $portfolioItem->tags()->first());
        self::assertEquals($tag2, $portfolioItem->tags()[1]);
        self::assertEquals($bulletPoint1, $portfolioItem->bulletPoints()->first());

    }

    /** @test */
    public function it_should_create_multiple_portfolio_item_from_array()
    {
        // Given
        $title = new Title("Test Title", "Test Titel");
        $description = new Description("Test Description", "Test Beschrijving");
        $websiteUrl = "Test Website Url";
        $image1Url = "Test Image Url 1";
        $image2Url = "Test Image Url 2";
        $tag1 = "Tag Name 1";
        $tag2 = "Tag Name 2";
        $mainImageUrl = "Main Image Url";
        $bulletPoint1 = new BulletPoint("Test Bullet Point 1", "Test Bullet Punt 1");

        $portfolioItemsAsArray = [
                0 => [
                    "title" => $title->toArray(),
                    "description" => $description->toArray(),
                    "website_url" => $websiteUrl,
                    "main_image" => [
                        "url" => $mainImageUrl
                    ],
                    "images" => [
                        0 => [
                            "url" => $image1Url
                        ],
                        1 => [
                            "url" => $image2Url
                        ]
                    ],
                    "tags" => [
                        $tag1, $tag2
                    ],
                    "bullet_points" => [
                        0 => $bulletPoint1->toArray()
                    ]
                ],
            1 => [
                "title" => $title->toArray(),
                "description" => $description->toArray(),
                "website_url" => $websiteUrl,
                "main_image" => [
                        "url" => $mainImageUrl
                    ],
                "images" => [
                    0 => [
                        "url" => $image1Url
                    ],
                    1 => [
                        "url" => $image2Url
                    ]
                ],
                "tags" => [
                    $tag1, $tag2
                ],
                "bullet_points" => [
                    0 => $bulletPoint1->toArray()
                ]
            ]
        ];

        // When
        $portfolioItems = PortfolioItemFactory::multipleFromArray($portfolioItemsAsArray);

        // Then
        self::assertEquals($title, $portfolioItems[0]->title());
        self::assertEquals($description, $portfolioItems[0]->description());
        self::assertEquals($websiteUrl, $portfolioItems[0]->websiteUrl());
        self::assertEquals($image1Url, $portfolioItems[0]->images()->first()->url());
        self::assertEquals($image2Url, $portfolioItems[0]->images()[1]->url());
        self::assertEquals($tag1, $portfolioItems[0]->tags()->first());
        self::assertEquals($tag2, $portfolioItems[0]->tags()[1]);
    }

}
