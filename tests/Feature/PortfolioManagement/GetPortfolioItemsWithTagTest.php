<?php

namespace Tests\Feature\PortfolioManagement;

use App\PortfolioManagement\Application\GetPortfolioItemsWithTag\GetPortfolioItemsWithTag;
use App\PortfolioManagement\Application\GetPortfolioItemsWithTag\GetPortfolioItemsWithTagInput;
use App\PortfolioManagement\Domain\PortfolioItems\ImageFactory;
use App\PortfolioManagement\Domain\PortfolioItems\PortfolioItem;
use App\PortfolioManagement\Domain\PortfolioItems\PortfolioItemFactory;
use App\PortfolioManagement\Domain\Repositories\PortfolioItemRepositoryInterface;
use Illuminate\Support\Facades\App;
use Tests\TestCase;
use Tests\Unit\PortfolioManagement\DummyPortfolioItemRepository;
use Tests\Unit\PortfolioManagement\ReturnConstantPortfolioItemRepository;

class GetPortfolioItemsWithTagTest extends TestCase
{
    private PortfolioItemRepositoryInterface $portfolioItemRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->portfolioItemRepository = new DummyPortfolioItemRepository();
    }

    /** @test */
    public function it_should_return_portfolio_items_with_certain_tag()
    {
        $images = collect();
        $firstTag = "Tag 1";
        $secondTag = "Tag 2";
        $tags = collect(array($firstTag, $secondTag));

        $portfolioItemWithTags = new PortfolioItem("Title", ImageFactory::placeholder(), "Description", "Website Url", $images, $tags);
        $portfolioItemsWithoutTags = PortfolioItemFactory::create(50);

        $this->portfolioItemRepository->add($portfolioItemWithTags);
        $this->portfolioItemRepository->addMultiple($portfolioItemsWithoutTags);

        $useCase = new GetPortfolioItemsWithTag($this->portfolioItemRepository);
        $useCaseInput = new GetPortfolioItemsWithTagInput([
            "tag" => $firstTag
        ]);

        $useCaseResult = $useCase->execute($useCaseInput);

        self::assertEquals($useCaseResult->portfolioItems()->first(), $portfolioItemWithTags);

    }

    /** @test */
    public function it_should_return_portfolio_items_with_tag_when_route_it_called()
    {
        $portfolioItemRepository = new ReturnConstantPortfolioItemRepository();
        $tag = $portfolioItemRepository->all()->first()->tags()->first();
        App::bind(PortfolioItemRepositoryInterface::class, ReturnConstantPortfolioItemRepository::class);

        $response = $this->get(route("portfolio-items-with-tag", [
            "tag" => $tag
        ]));

        $portfolioItems = $response["payload"]['portfolio_items'];

        self::assertNotEmpty($portfolioItems);

        foreach ($portfolioItems as $portfolioItem)
        {
            self::assertNotEmpty($portfolioItem);
        }
    }
}
