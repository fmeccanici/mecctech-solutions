<?php

namespace Tests\Feature\PortfolioManagement;

use App\PortfolioManagement\Application\GetAllPortfolioItems\GetAllPortfolioItems;
use App\PortfolioManagement\Application\GetAllPortfolioItems\GetAllPortfolioItemsInput;
use App\PortfolioManagement\Domain\PortfolioItems\PortfolioItemFactory;
use App\PortfolioManagement\Domain\Repositories\PortfolioItemRepositoryInterface;
use Illuminate\Support\Facades\App;
use Tests\TestCase;
use Tests\Unit\PortfolioManagement\DummyPortfolioItemRepository;
use Tests\Unit\PortfolioManagement\ReturnConstantPortfolioItemRepository;

class GetAllPortfolioItemsTest extends TestCase
{
    private PortfolioItemRepositoryInterface $portfolioItemRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->portfolioItemRepository = new DummyPortfolioItemRepository();
    }

    /** @test */
    public function it_should_return_all_portfolio_items()
    {
        $portfolioItems = PortfolioItemFactory::create(50);
        $this->portfolioItemRepository->addMultiple($portfolioItems);

        $useCase = new GetAllPortfolioItems($this->portfolioItemRepository);
        $useCaseInput = new GetAllPortfolioItemsInput();
        $useCaseResult = $useCase->execute($useCaseInput);

        $resultingPortfolioItems = $useCaseResult->portfolioItems();

        self::assertEquals(sizeof($portfolioItems), sizeof($resultingPortfolioItems));
    }

    /** @test */
    public function it_should_return_all_portfolio_items_when_route_it_called()
    {
        App::bind(PortfolioItemRepositoryInterface::class, ReturnConstantPortfolioItemRepository::class);

        $response = $this->get(route("all-portfolio-items"));
        $portfolioItems = $response["payload"]['portfolio_items'];
        foreach ($portfolioItems as $portfolioItem)
        {
            self::assertNotEmpty($portfolioItem);
        }
    }
}
